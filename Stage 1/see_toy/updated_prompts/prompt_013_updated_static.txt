Classify each customer and assistant statement into distinct intent categories based on their purpose, ensuring clear differentiation and consistent categorization.

1. **Clarify Intent Definitions**:
   - "close_conversation": Indicates the conversation is ending, consistently categorized with phrases like "You’re welcome."
   - "acknowledge": Shows understanding or agreement without further action. Example: "Oh, I didn’t realize."
   - "express_gratitude": Shows appreciation. Example: "Much appreciated!"
   - "confirm_action": Verifies an action has been completed.
   - "offer_solution": Proposes a resolution to an issue, distinct from confirming an action.
   - "suggest_troubleshooting": Proposes a solution, focusing on resolving issues.
   - "ask_error_details": Gathers information to understand an issue.

2. **Examples for Ambiguous Cases**:
   - Differentiate "provide_new_address" from "provide_order_number":
     - Example: "customer: Sure, it’s 12 Maple Street, Springfield." (provide_new_address) vs. "customer: It’s 78342." (provide_order_number).

3. **Contextual Cues**:
   - Use context to resolve ambiguity, e.g., post-resolution statements often indicate closure:
     - "customer: No, that’s all. Have a nice day!" (close_conversation) vs. "customer: Okay, thanks for checking." (acknowledge).

4. **Consistency in Intent Assignment**:
   - Ensure consistent categorization for similar phrases, such as variations of "You’re welcome" under "close_conversation."

5. **Handling Mixed Intents**:
   - Manage mixed intents by splitting them or prioritizing the primary intent:
     - Example: "assistant: Here’s the new code: THANKYOU15. You can use it until next week." (provide_new_code) vs. "assistant: I’ll refund the extra charge immediately." (offer_solution).

6. **Role-Specific Instructions**:
   - Highlight the speaker's role in intent classification:
     - Example: "customer: Yes please, that would help." (accept_help) vs. "assistant: Happy to help!" (close_conversation).

7. **Clarification for Ambiguous Statements**:
   - Clarify how to categorize similar statements serving different purposes:
     - "suggest_troubleshooting" involves proposing a solution, while "ask_error_details" focuses on information gathering.

8. **Encourage Specificity**:
   - Encourage specific and concise classifications by focusing on the core purpose of the message rather than secondary details.

By following these refined guidelines, ensure accurate intent classification and improved clustering performance, reducing errors like false splits and merges.


        ### Instructions for Identifying Intents

        **Goal:** assign an intent to *every* new message.
        For each message, either reuse an intent from the existing intent list or create a new one if no suitable intent exists.

        
        Rules
        -----
        - Messages start with “assistant:” or “customer:”.
        - **Do NOT skip messages.**
        - Exactly **one** intent per line.
        - Use underscores, no capitals, no spaces.
        - Newly created intents must not duplicate an existing one.
        - Afterwards the new intents become part of the growing intent list.
        - **In this case {message_count} messages have to be assigned** in coupled intents.

        
 Return the output in EXACT format as specified below:
                                
        ### EXACT Output Format (only return the coupled intents list):

        Coupled intents:
        1. [intent_name]
        2. [intent_name]
        3. [intent_name]
        ...

        ### Starting Point
        Existing intents: {intent_list}

        ---
        ### Conversation for Analysis
        {trunc}
        